/*  This file is part of Axolotl.
 *
 * Axolotl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Axolotl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Axolotl.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __AXOLOTL_LANG_COMPILER_H__
#define __AXOLOTL_LANG_COMPILER_H__

#include "lang/forward.hpp"
#include "bits/blob.hpp"
#include "vm/module.hpp"

#include <iostream>

namespace lang
{
    class Compiler
    {
    public:
        enum Flags
        {
            PP_EARLY_AST = 0x01, //! Pretty-print the early AST generated by the parser
            PP_AST       = 0x02, //! Pretty-print the AST after transformation
            PP_IR        = 0x04, //! Pretty-print the generated IR
            DIS_BYTECODE = 0x08  //! Disassemble the compiled blob
        };

    public:
        Compiler(std::string module_name, std::istream& in, int flags = 0, std::ostream& out = std::cout);
        Compiler(vm::Module const& module, std::istream& in, int flags = 0, std::ostream& out = std::cout);
        ~Compiler();

        vm::Module compile();

    private:
        void M_parse();
        void M_transformAST();
        void M_generateIR();
        bits::Blob M_byteCodeBackend();
        void M_prettyPrint();

    private:
        std::istream& m_in;
        Flags m_flags;
        std::ostream& m_out;
        Parser* m_parser;
        ast::Node* m_root;
        vm::Module m_module;
    };
}

#endif // __AXOLOTL_LANG_COMPILER_H__
