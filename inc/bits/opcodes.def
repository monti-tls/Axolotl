/*  This file is part of Axolotl.
 *
 * Axolotl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Axolotl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Axolotl.  If not, see <http://www.gnu.org/licenses/>.
 */

DEF_MASK(DEBUG, 0xF0000000) // the first operand is a debug information entry

DEF_OPCODE(INVALID,       0) // invalid, triggers an exception
DEF_OPCODE(NOP,           0) // nothing
DEF_OPCODE(POP,           0) // pop()
DEF_OPCODE(LOAD_CONST,    1) // if _1 < 0, argument, otherwise from const table
DEF_OPCODE(LOAD_LOCAL,    1) // index _1
DEF_OPCODE(STOR_LOCAL,    1) // _1 = pop()
DEF_OPCODE(LOAD_MEMBER,   1) // push(pop()[_1])
DEF_OPCODE(STOR_MEMBER,   1) // pop()[_1] = pop()
DEF_OPCODE(LOAD_GLOBAL,   1) // push(globals(_1))
DEF_OPCODE(STOR_GLOBAL,   1) // globals(_1) = pop()
DEF_OPCODE(INVOKE,        1) // pop().invoke(_1 arguments)
DEF_OPCODE(METHOD,        2) // self = pop(); self.invoke(self, _1 arguments)
DEF_OPCODE(LEAVE,         0) // returns no value
DEF_OPCODE(RETURN,        0) // returns pop()
DEF_OPCODE(JMP,           1) // pc = _1
DEF_OPCODE(JMPR,          1) // pc += _1
DEF_OPCODE(JMP_IF_FALSE,  1) // if !pop() pc = _1
DEF_OPCODE(JMPR_IF_FALSE, 1) // if !pop() pc += _1
DEF_OPCODE(JMP_IF_TRUE,   1) // if pop() pc = _1
DEF_OPCODE(JMPR_IF_TRUE,  1) // if pop() pc += _1
DEF_OPCODE(IMPORT,        1)
DEF_OPCODE(IMPORT_MASK,   2)
